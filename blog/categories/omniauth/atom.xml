<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: omniauth | Hamit Türkü Kaya]]></title>
  <link href="http://hamitturkukaya.github.com/blog/categories/omniauth/atom.xml" rel="self"/>
  <link href="http://hamitturkukaya.github.com/"/>
  <updated>2013-04-04T15:05:10+03:00</updated>
  <id>http://hamitturkukaya.github.com/</id>
  <author>
    <name><![CDATA[Hamit Türkü Kaya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Devise Gem ile Facebook Authorization Kullanımı]]></title>
    <link href="http://hamitturkukaya.github.com/blog/2013/04/04/devise-gem-ile-facebook-authorization-kullanimi/"/>
    <updated>2013-04-04T14:12:00+03:00</updated>
    <id>http://hamitturkukaya.github.com/blog/2013/04/04/devise-gem-ile-facebook-authorization-kullanimi</id>
    <content type="html"><![CDATA[<p>Bunun için öncelikle <a href="https://github.com/mkdynamic/omniauth-facebook">'omniauth-facebook'</a> gemine ihtiyacımız var;</p>

<pre><code>gem 'omniauth-facebook'
</code></pre>

<p>gem file'ımıza gemimizi ekledikten sonra <strong>'bundle-install'</strong> komutunu veriyoruz ve gem projeye dahil ettikten sonra ayarlarımızı yapmaya hazırız.</p>

<p>Öncelikle <a href="https://developers.facebook.com/apps">Facebook Developers</a> üzerinden bir api-key alıyoruz.
ve devise initilializerina bu api keyi giriyoruz</p>

<h5>config/initializers/devise.rb</h5>

<p><code>ruby
require "omniauth-facebook"
config.omniauth :facebook, 'XXXXXX', 'YYYYYYY'
</code></p>

<p>Bu işlemden sonra istek başarılı olursa User tablomuzda tutlacak Facebook provider id için bir migration oluştruyoruz.</p>

<!-- more -->


<h5>db/migrate/xxxx_add_provider_id_to_users.rb</h5>

<p><code>ruby
class AddProviderIdToUsers &lt; ActiveRecord::Migration
def change
add_column :users, :provider_id, :string
add_index :users, :provider_id
end
end
</code></p>

<p>migration'ımızı oluşturduktan sonra 'rake db:migrate' koutuyla değişiklikleri uyguluyoruz.</p>

<p>Sıradaki işlem de facebook'tan gelen callbackleri kontrl edecek controllerı yazmak bu yüzden auth_callbacks_controller.rb dosyamızı oluşturup içine kullanıcı kayıtlıysa session açan, değilse üye yapan metodumuzu yazıyoruz</p>

<h5>app/controllers/auth_callbacks_controller.rb</h5>

<p><code>ruby
class AuthCallbacksController &lt; Devise::OmniauthCallbacksController
def facebook
@user = User.find_for_facebook_oauth(request.env["omniauth.auth"], current_user)
if @user.persisted?
flash[:success] = I18n.t "devise.omniauth_callbacks.success", :kind =&gt; "Facebook"
sign_in_and_redirect @user, :event =&gt; :authentication
else
session["devise.facebook_data"] = request.env["omniauth.auth"]
redirect_to new_user_registration_url
end
end
end
</code>
Son işlemimiz de User modelimizi omniauthable olarak belirtmek ve tablomuza kaydedecek methodu yazmak ve route işlemlerini yapmak olacak
bunun için önce model dosyamıza</p>

<h5>app/models/user.rb</h5>

<p>```ruby
devise :database_authenticatable, :registerable,
:recoverable, :rememberable, :trackable, :validatable, :omniauthable, :omniauth_providers => [:facebook]</p>

<p>def self.find_for_facebook_oauth(access_token, signed_in_resource=nil)
data = access_token.extra.raw_info
user = find_by_provider_id(data.id)
if user
user
else
create!(email: data.email, name: data.name, password: Devise.friendly_token[0, 8], provider_id: data.id)
end
end
```
kodlarını ekliyoruz ve routes.rb dosyasındaki 'devise_for :users' satırını</p>

<p><code>ruby
devise_for :users, :controllers =&gt; {
:omniauth_callbacks =&gt; "auth_callbacks"
}
</code></p>

<p>şeklinde değiştiriyoruz.</p>

<p>Artık tek yapmamız gereken istediğimiz yerden</p>

<p><code>ruby
= link_to "Facebook Login",user_omniauth_authorize_path(provider: 'facebook') , class: 'auth_provider'
</code>
linkini view katmanına eklemek.</p>
]]></content>
  </entry>
  
</feed>
